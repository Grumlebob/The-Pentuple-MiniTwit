name: Build, Test & Deploy

env:
  api-key: ${{ secrets.GITHUB_TOKEN }} # Navn pÃ¥ evn variable er "api-key"

on:
  push:
    branches:
      - main
      - master
    paths-ignore:
      - '*.md'
  pull_request:
    branches:
      - main
    paths-ignore:
      - '*.md'
  workflow_dispatch:

jobs:
  ###########################################################################
  # 1) BUILD & TEST JOB
  ###########################################################################
  build:
    name: Build & Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 9.0.x
          include-prerelease: true  # For .NET 9.0 previews

      - name: Restore dependencies
        run: dotnet restore MiniTwitSolution/MiniTwitSolution.sln

      - name: Build solution
        run: dotnet build MiniTwitSolution/MiniTwitSolution.sln --no-restore --configuration Release

      - name: Run tests
        run: dotnet test MiniTwitSolution/MiniTwitSolution.sln --collect:"XPlat Code Coverage"

      - name: Generate Code Coverage Report
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: MiniTwitSolution/MiniTwit.Test/TestResults/**/coverage.cobertura.xml
          badge: true
          fail_below_min: true
          format: markdown
          hide_branch_rate: false
          hide_complexity: true
          indicators: true
          output: both
          thresholds: "20 80"

      - name: Send coverage to Coveralls
        uses: coverallsapp/github-action@v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path-to-lcov: "MiniTwitSolution/MiniTwit.Test/TestResults/**/coverage.cobertura.xml"

      - name: Write Coverage Summary to Job
        run: cat code-coverage-results.md >> $GITHUB_STEP_SUMMARY

  ###########################################################################
  # 2) DEPLOY JOB
  ###########################################################################
  deploy:
    name: Build Images & Deploy
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Build & push the migrator image
      - name: Build & Push Migrator
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile.migrator
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/minitwit-migrator:latest
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/minitwit-migrator:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/minitwit-migrator:buildcache,mode=max

      # Build & push the API image
      - name: Build & Push API
        uses: docker/build-push-action@v6
        with:
          context: .
          file: MiniTwitSolution/MiniTwit.Api/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/minitwit-api:latest
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/minitwit-api:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/minitwit-api:buildcache,mode=max

      # Build & push the Client image
      - name: Build & Push Client
        uses: docker/build-push-action@v6
        with:
          context: .
          file: MiniTwitSolution/MiniTwit.Client/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/minitwit-client:latest
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/minitwit-client:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/minitwit-client:buildcache,mode=max

      # Build & push the Simulator image
      - name: Build & Push Simulator
        uses: docker/build-push-action@v6
        with:
          context: MiniTwitSolution/Simulator
          file: Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/minitwit-simulator:latest
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/minitwit-simulator:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/minitwit-simulator:buildcache,mode=max

      - name: Configure SSH for deployment
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_KEY }}" > ~/.ssh/do_ssh_key
          chmod 600 ~/.ssh/do_ssh_key

      - name: Deploy to Server
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} \
              -i ~/.ssh/do_ssh_key -o StrictHostKeyChecking=no \
              '/minitwit/deploy.sh'
