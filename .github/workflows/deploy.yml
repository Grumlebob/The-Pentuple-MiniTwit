name: Deploy

on:
  #ensure build and test runs first
  workflow_run:
    workflows: ["Build and Test"]
    types:
      - completed

jobs:
  deploy:
    name: Deploy to DigitalOcean
    # only deploy on successful build test and push
    if: >
      ${{ github.event.workflow_run.conclusion == 'success' && 
        github.event.workflow_run.event == 'push' &&
        github.event.workflow_run.head_branch == 'main' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Debug - List repository contents
        run: |
          echo "=== Repository Structure ==="
          find . -type f -name "deploy.sh" -o -name "docker-compose.yml" | sort
          echo ""
          echo "=== Content of MiniTwitSolution/remote_files directory ==="
          ls -la MiniTwitSolution/remote_files || echo "Directory not found"

      # Build & push steps for Migrator, API, Client images
      - name: Build & Push Migrator
        uses: docker/build-push-action@v6
        with:
          context: ./MiniTwitSolution
          file: ./MiniTwitSolution/MiniTwit.Api/Dockerfile.migrator
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/minitwit-migrator:latest
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/minitwit-migrator:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/minitwit-migrator:buildcache,mode=max

      - name: Build & Push API
        uses: docker/build-push-action@v6
        with:
          context: ./MiniTwitSolution
          file: ./MiniTwitSolution/MiniTwit.Api/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/minitwit-api:latest
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/minitwit-api:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/minitwit-api:buildcache,mode=max

      - name: Build & Push Client
        uses: docker/build-push-action@v6
        with:
          context: ./MiniTwitSolution
          file: ./MiniTwitSolution/MiniTwit.Client/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/minitwit-client:latest
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/minitwit-client:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/minitwit-client:buildcache,mode=max

      - name: Configure SSH for deployment
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_KEY }}" > ~/.ssh/do_ssh_key
          chmod 600 ~/.ssh/do_ssh_key
          rm -f .ssh/known_hosts
          
      - name: Copy migration docker-compose.yml to api
        run: |
          echo "Copying docker-compose.yml to server..."
          scp -v -i ~/.ssh/do_ssh_key -o StrictHostKeyChecking=no ./MiniTwitSolution/remote_files/migrator/docker-compose.yml ${{ secrets.SSH_USER }}@${{ secrets.API_IP }}:~/migrator/docker-compose.yml
          echo "Copy completed"
          
      - name: Copy migration script to manager
        run: |
          echo "Copying docker-compose.yml to server..."
          scp -v -i ~/.ssh/do_ssh_key -o StrictHostKeyChecking=no ./MiniTwitSolution/remote_files/migrator/doMigration.sh ${{ secrets.SSH_USER }}@${{ secrets.MANAGER_IP }}:~/migrator/doMigration.sh
          echo "Copy completed"
          
      - name: Run Migration on API Droplet
        run: |
          ssh -v ${{ secrets.SSH_USER }}@${{ secrets.API_IP }} \
            -i ~/.ssh/do_ssh_key -o StrictHostKeyChecking=no \
            'cd ~/migrator && bash -x doMigration.sh'

      - name: Copy deployment script to api
        run: |
          echo "Copying deploy.sh to server..."
          scp -v -i ~/.ssh/do_ssh_key -o StrictHostKeyChecking=no ./MiniTwitSolution/remote_files/api-swarm/deploy.sh ${{ secrets.SSH_USER }}@${{ secrets.API_IP }}:~/minitwit/deploy.sh
          echo "Copy completed"

      - name: Copy docker-compose.yml to api
        run: |
          echo "Copying docker-compose.yml to server..."
          scp -v -i ~/.ssh/do_ssh_key -o StrictHostKeyChecking=no ./MiniTwitSolution/remote_files/api-swarm/docker-compose.yml ${{ secrets.SSH_USER }}@${{ secrets.API_IP }}:~/minitwit/docker-compose.yml
          echo "Copy completed"

      - name: Deploy to api
        run: |
          echo "Starting deployment..."
          ssh -v ${{ secrets.SSH_USER }}@${{ secrets.API_IP }} \
            -i ~/.ssh/do_ssh_key -o StrictHostKeyChecking=no \
            'cd ~/minitwit && chmod +x deploy.sh && bash -x deploy.sh || { echo "DEPLOYMENT FAILED WITH ERROR $?"; cat deploy.sh; }'

      - name: Copy deployment script to client
        run: |
          echo "Copying deploy.sh to server..."
          scp -v -i ~/.ssh/do_ssh_key -o StrictHostKeyChecking=no ./MiniTwitSolution/remote_files/client/deploy.sh ${{ secrets.SSH_USER }}@${{ secrets.CLIENT_IP }}:~/minitwit/deploy.sh
          echo "Copy completed"

      - name: Copy docker-compose.yml to client
        run: |
          echo "Copying docker-compose.yml to server..."
          scp -v -i ~/.ssh/do_ssh_key -o StrictHostKeyChecking=no ./MiniTwitSolution/remote_files/client/docker-compose.yml ${{ secrets.SSH_USER }}@${{ secrets.CLIENT_IP }}:~/minitwit/docker-compose.yml
          echo "Copy completed"

      - name: Deploy to client
        run: |
          echo "Starting deployment..."
          ssh -v ${{ secrets.SSH_USER }}@${{ secrets.CLIENT_IP }} \
            -i ~/.ssh/do_ssh_key -o StrictHostKeyChecking=no \
            'cd ~/minitwit && chmod +x deploy.sh && bash -x deploy.sh || { echo "DEPLOYMENT FAILED WITH ERROR $?"; cat deploy.sh; }'