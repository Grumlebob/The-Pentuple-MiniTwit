@page "/login"
@inject MiniTwitClient MiniTwitClient
@inject NavigationManager NavManager

<h3>Sign In</h3>

<EditForm Model="loginModelWrapper" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div>
        <label>Email:</label>
        <InputText @bind-Value="loginModelWrapper.Email" />
    </div>
    <div>
        <label>Password:</label>
        <InputText @bind-Value="loginModelWrapper.Password" type="password" />
    </div>
    <button type="submit">Sign In</button>
</EditForm>

@if (!string.IsNullOrEmpty(error))
{
    <div class="error">@error</div>
}

@code {
    private LoginModelWrapper loginModelWrapper = new();
    private string error;

    private async Task HandleValidSubmit()
    {
        // Create the immutable record from the mutable wrapper.
        var loginRequest = new LoginUserRequest(loginModelWrapper.Email, loginModelWrapper.Password);
        var response = await MiniTwitClient.LoginUserAsync(loginRequest);
        if (response.IsSuccessStatusCode)
        {
            NavManager.NavigateTo("/");
        }
        else
        {
            error = "Login failed. Please check your credentials.";
        }
    }

    // Mutable wrapper for data binding.
    private class LoginModelWrapper
    {
        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid Email Address")]
        public string Email { get; set; } = "";

        [Required(ErrorMessage = "Password is required")]
        public string Password { get; set; } = "";
    }
}