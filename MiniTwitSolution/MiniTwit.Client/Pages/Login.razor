@page "/login"
@using Blazored.LocalStorage
@inject MiniTwitClient MiniTwitClient
@inject NavigationManager NavManager
@inject ILocalStorageService LocalStorage

<h3>Sign In</h3>

<EditForm Model="loginModel" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div>
        <label>Email:</label>
        <InputText @bind-Value="loginModel.Email" />
    </div>
    <div>
        <label>Password:</label>
        <InputText @bind-Value="loginModel.Password" type="password" />
    </div>
    <button type="submit">Sign In</button>
</EditForm>

@if (!string.IsNullOrEmpty(error))
{
    <div class="error">@error</div>
}

@code {
    [CascadingParameter]
    public UserSession Session { get; set; }
    // Using a mutable wrapper for binding if needed
    private LoginModelWrapper loginModel = new();
    private string error;

    private async Task HandleValidSubmit()
    {
        var loginRequest = new LoginUserRequest(loginModel.Email, loginModel.Password);
        var response = await MiniTwitClient.LoginUserAsync(loginRequest);
        if (response.IsSuccessStatusCode)
        {
            // Set session state on successful login.
            Session.IsLoggedIn = true;
            Session.Username = loginModel.Email; // or whatever identifies the user
            await Session.SaveAsync(LocalStorage);
            NavManager.NavigateTo("/"); // navigate to the private timeline
        }
        else
        {
            error = "Login failed. Please check your credentials.";
        }
    }

    private class LoginModelWrapper
    {
        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid Email Address")]
        public string Email { get; set; } = "";
        [Required(ErrorMessage = "Password is required")]
        public string Password { get; set; } = "";
    }
}