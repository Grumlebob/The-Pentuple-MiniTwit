@page "/register"
@inject MiniTwitClient MiniTwitClient
@inject NavigationManager NavManager

<h3>Sign Up</h3>

<EditForm Model="registerModelWrapper" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator/>
    <ValidationSummary/>

    <div>
        <label>Username:</label>
        <InputText @bind-Value="registerModelWrapper.Username"/>
    </div>
    <div>
        <label>Email:</label>
        <InputText @bind-Value="registerModelWrapper.Email" type="email"/>
    </div>
    <div>
        <label>Password:</label>
        <InputText @bind-Value="registerModelWrapper.Password" type="password"/>
    </div>
    <div>
        <label>Password (repeat):</label>
        <InputText @bind-Value="registerModelWrapper.Password2" type="password"/>
    </div>
    <button type="submit">Sign Up</button>
</EditForm>

@if (!string.IsNullOrEmpty(error))
{
    <div class="error">@error</div>
}

@code {
    private RegisterModelWrapper registerModelWrapper = new();
    private string error;

    private async Task HandleValidSubmit()
    {
        if (registerModelWrapper.Password != registerModelWrapper.Password2)
        {
            error = "Passwords do not match.";
            return;
        }

        // Create the immutable record from the mutable wrapper.
        var registerRequest = new RegisterUserRequest(
            registerModelWrapper.Username,
            registerModelWrapper.Email,
            registerModelWrapper.Password);

        var response = await MiniTwitClient.RegisterUserAsync(registerRequest);
        if (response.IsSuccessStatusCode)
        {
            NavManager.NavigateTo("/login");
        }
        else
        {
            error = "Registration failed. Please try again.";
        }
    }

    // Mutable wrapper for data binding.
    private class RegisterModelWrapper
    {
        [Required(ErrorMessage = "Username is required")]
        public string Username { get; set; } = "";

        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid Email Address")]
        public string Email { get; set; } = "";

        [Required(ErrorMessage = "Password is required")]
        public string Password { get; set; } = "";

        [Required(ErrorMessage = "Please confirm your password")]
        public string Password2 { get; set; } = "";
    }

}