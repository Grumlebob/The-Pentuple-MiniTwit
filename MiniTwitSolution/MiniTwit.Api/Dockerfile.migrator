# Build stage: Generate the self-contained EF Core migrations bundle
FROM mcr.microsoft.com/dotnet/sdk:9.0 AS build
WORKDIR /src

# Install the EF Core CLI tool globally
RUN dotnet tool install --global dotnet-ef

# Ensure the global tools folder is in the PATH
ENV PATH="${PATH}:/root/.dotnet/tools"

# Copy all project files. (Adjust COPY commands if you want to limit to specific projects.)
COPY . .

WORKDIR /src/MiniTwit.Api

# Restore dependencies and generate the migration bundle.
RUN dotnet restore && \
    dotnet ef migrations bundle \
      --project MiniTwit.Api.csproj \
      --startup-project MiniTwit.Api.csproj \
      --self-contained -r linux-x64 -o ef-migrations-bundle


# Runtime stage: Lightweight image with only what is needed to run the bundle
FROM mcr.microsoft.com/dotnet/runtime-deps:9.0
WORKDIR /app

# Install Bash and dos2unix for proper script execution
RUN apt-get update && \
    apt-get install --no-install-recommends -y dos2unix=7.4.3-1 && \
    rm -rf /var/lib/apt/lists/*

# Copy the generated migration bundle from the build stage
COPY --from=build /src/MiniTwit.Api/ef-migrations-bundle ./
COPY --from=build /src/MiniTwit.Api/appsettings.json ./
RUN chmod +x ./ef-migrations-bundle

# Copy the migration runner script
COPY MiniTwit.Api/migrate.sh ./
RUN dos2unix ./migrate.sh && chmod +x ./migrate.sh

# When the migration bundle runs, it should perform the necessary database updates.
# Optionally, your migrate.sh script can create a file like /tmp/migrations_done
# to signal a successful migration for the healthcheck.
ENTRYPOINT ["bash", "./migrate.sh"]
